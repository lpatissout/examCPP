#include <iostream>
#include <cstdlib>  // Pour utiliser system("cls") ou system("clear")
#include <limits>
#include <array>

const int SIZE = 3;  // Taille de la grille
const int SCORE_MAX = 5;  // Score maximum pour gagner

// Fonction pour effacer l'écran
void effacerEcran() {
    #ifdef _WIN32
        system("cls");  // Windows
    #else
        system("clear");  // Unix/Linux, including macOS
    #endif
}

// Structure pour représenter les joueurs
struct Joueur {
    char symbole;
    int score;
};

// Fonction pour afficher la grille avec le titre
void afficherGrille(char grille[SIZE][SIZE], const std::string& titre, std::array<int, 3> ligneGagnante) {
    // Affiche le titre
    std::cout << titre << std::endl;

    for (int i = 0; i < SIZE; ++i) {
        for (int j = 0; j < SIZE; ++j) {
            if (ligneGagnante[0] == i * SIZE + j || ligneGagnante[1] == i * SIZE + j || ligneGagnante[2] == i * SIZE + j) {
                // Affiche un caractère barré si la position est gagnante
                std::cout << " ̶" << grille[i][j] << "̶";
            } else {
                std::cout << grille[i][j];
            }

            if (j < SIZE - 1) {
                std::cout << " | ";
            }
        }
        std::cout << std::endl;
        if (i < SIZE - 1) {
            for (int k = 0; k < SIZE * 4 - 1; ++k) {
                std::cout << "-";
            }
            std::cout << std::endl;
        }
    }
}

// Fonction pour vérifier la victoire
bool verifierVictoire(char grille[SIZE][SIZE], char symbole, std::array<int, 3>& ligneGagnante) {
    // Vérification des lignes et colonnes
    for (int i = 0; i < SIZE; ++i) {
        if ((grille[i][0] == symbole && grille[i][1] == symbole && grille[i][2] == symbole) ||
            (grille[0][i] == symbole && grille[1][i] == symbole && grille[2][i] == symbole)) {
            // Indique les positions de la ligne gagnante
            ligneGagnante[0] = i * SIZE;
            ligneGagnante[1] = i * SIZE + 1;
            ligneGagnante[2] = i * SIZE + 2;
            return true;
        }
    }

    // Vérification des diagonales
    if ((grille[0][0] == symbole && grille[1][1] == symbole && grille[2][2] == symbole) ||
        (grille[0][2] == symbole && grille[1][1] == symbole && grille[2][0] == symbole)) {
        // Indique les positions de la ligne gagnante
        ligneGagnante[0] = 0;
        ligneGagnante[1] = 4;
        ligneGagnante[2] = 8;
        return true;
    }

    return false;
}

// Fonction principale
int main() {
    char grille[SIZE][SIZE];

    // Joueurs
    Joueur joueurs[2] = {{'X', 0}, {'O', 0}};

    // Boucle principale
    do {
        char symboleCourant = (joueurs[0].score > joueurs[1].score) ? joueurs[1].symbole : joueurs[0].symbole;
        int ligne, colonne;

        // Initialisation de la grille
        for (int i = 0; i < SIZE; ++i) {
            for (int j = 0; j < SIZE; ++j) {
                grille[i][j] = ' ';
            }
        }

        // Boucle de jeu
        while (true) {
            // Efface l'écran avant d'afficher la grille
            effacerEcran();

            // Affiche la grille avec le titre et la ligne gagnante
            afficherGrille(grille, "-----------------------------------------------------------------------LE MORPAT-------------------------------------------------------------------", { -1, -1, -1 });

            // Demande au joueur actuel de jouer
            std::cout << "Joueur " << (symboleCourant == joueurs[0].symbole ? "1" : "2") << ", entrez le numéro de la case (1-9) : ";

            // Vérifie si la saisie est un nombre entre 1 et 9
            while (!(std::cin >> ligne) || ligne < 1 || ligne > SIZE * SIZE || grille[(ligne - 1) / SIZE][(ligne - 1) % SIZE] != ' ') {
                std::cout << "Saisie invalide. Entrez un nombre entre 1 et 9 pour une case non occupée : ";
                std::cin.clear();
                std::cin.ignore(std::numeric_limits<std::streamsize>::max(), '\n');
            }

            // Vérifie si la case est valide
            if (ligne >= 1 && ligne <= SIZE * SIZE && grille[(ligne - 1) / SIZE][(ligne - 1) % SIZE] == ' ') {
                grille[(ligne - 1) / SIZE][(ligne - 1) % SIZE] = symboleCourant;
                std::array<int, 3> ligneGagnante = { -1, -1, -1 };

                // Vérifie la victoire
                if (verifierVictoire(grille, symboleCourant, ligneGagnante)) {
                    // Efface l'écran avant d'afficher la grille finale
                    effacerEcran();

                    // Affiche la grille avec le titre et la ligne gagnante
                    afficherGrille(grille, "-----------------------------------------------------------------------LE MORPAT-------------------------------------------------------------------", ligneGagnante);

                    std::cout << "C'est gagne pour le joueur " << (symboleCourant == joueurs[0].symbole ? "1" : "2") << " !" << std::endl;

                    // Incrémente le score du joueur gagnant
                    if (symboleCourant == joueurs[0].symbole) {
                        ++joueurs[0].score;
                    } else {
                        ++joueurs[1].score;
                    }

                    // Affiche le score
                    std::cout << "Score : Joueur 1 = " << joueurs[0].score << ", Joueur 2 = " << joueurs[1].score << std::endl;

                    break;
                }

                // Vérifie l'égalité
                bool grilleRemplie = true;
                for (int i = 0; i < SIZE; ++i) {
                    for (int j = 0; j < SIZE; ++j) {
                        if (grille[i][j] == ' ') {
                            grilleRemplie = false;
                            break;
                        }
                    }
                    if (!grilleRemplie) {
                        break;
                    }
                }

                if (grilleRemplie) {
                    // Efface l'écran avant d'afficher la grille finale en cas de match nul
                    effacerEcran();

                    // Affiche la grille avec le titre
                    afficherGrille(grille, "-----------------------------------------------------------------------LE MORPAT-------------------------------------------------------------------", { -1, -1, -1 });

                    std::cout << "Match nul !" << std::endl;
                    break;
                }

                // Change de joueur
                symboleCourant = (symboleCourant == joueurs[0].symbole) ? joueurs[1].symbole : joueurs[0].symbole;
            }
        }

        // Vérifie la condition de fin de jeu
        if (joueurs[0].score == SCORE_MAX || joueurs[1].score == SCORE_MAX) {
            std::cout << "Victoire du joueur " << (joueurs[0].score == SCORE_MAX ? "1" : "2") << " ! Merci d'avoir joue !" << std::endl;
            break;
        }

        // Demande aux joueurs s'ils veulent rejouer
        char choixRejouer;
        std::cout << "Voulez-vous rejouer ? (O pour oui, X pour non) : ";
        std::cin >> choixRejouer;

        if (choixRejouer != 'O' && choixRejouer != 'o') {
            break;  // Sort de la boucle principale
        }

    } while (true);

    return 0;
}
